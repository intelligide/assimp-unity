trigger:
  - master

variables:
  assimp_version: 4.1.0
  package_folder: com.arsenstudio.assimp

stages:
  # - stage: check
  #   displayName: Check
  #   jobs:
  #     - job: check_docs
  #       displayName: Docs
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #         - task: Docker@0
  #           displayName: Check Gemfile lock
  #           inputs:
  #             containerRegistryType: 'Container Registry'
  #             action: 'Run an image'
  #             imageName: 'jekyll/jekyll:latest'
  #             volumes: |
  #               $(build.sourcesDirectory)/docs:/srv/jekyll
  #             containerCommand: "bash -c \"bundle update --frozen\"" # Cannot pass '--' args
  #             detached: false

########################################################################################################################
## Build
########################################################################################################################

  - stage: build
    displayName: Build
    jobs:
      - job: build_assimpnet
        displayName: AssimpNet
        pool:
          vmImage: 'windows-latest'
        variables:
          solution: '**/*.sln'
          buildPlatform: 'Any CPU'
          buildConfiguration: 'Release'
        steps:
          - checkout: none

          - bash: git clone https://github.com/intelligide/assimpnet-unity assimpnet && cd assimpnet
            displayName: Download AssimpNet sources

          - task: NuGetToolInstaller@1
            displayName: Nuget installation

          - task: NuGetCommand@2
            displayName: Restore solution
            inputs:
              restoreSolution: '$(solution)'

          - task: VSBuild@1
            displayName: Build AssimpNet
            inputs:
              solution: '$(solution)'
              platform: '$(buildPlatform)'
              configuration: '$(buildConfiguration)'

          - publish: $(System.DefaultWorkingDirectory)/assimpnet/AssimpNet/bin/Release
            artifact: AssimpNet

      - job: build_assimp_win
        displayName: Assimp for Windows
        strategy:
          matrix:
            x86_64:
              GENERATOR_ARCH: x64
              BUILD_ARCH: x64
            x86:
              GENERATOR_ARCH: Win32
              BUILD_ARCH: x86
        pool:
          vmImage: 'vs2017-win2016'
        steps:
          - checkout: none

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimp_version).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - task: CMake@1
            displayName: Configure Assimp
            inputs:
              workingDirectory: assimp-$(assimp_version)
              cmakeArgs: -G "Visual Studio 15 2017" -A $(GENERATOR_ARCH) -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel
                -DASSIMP_BUILD_TESTS=OFF -DASSIMP_NO_EXPORT=ON -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DBUILD_SHARED_LIBS=ON

          - task: MSBuild@1
            displayName: Build Assimp
            inputs:
              solution: assimp-$(assimp_version)/Assimp.sln
              msbuildArchitecture: $(BUILD_ARCH)
              configuration: MinSizeRel

          - publish: $(System.DefaultWorkingDirectory)/assimp-$(assimp_version)/bin/MinSizeRel
            artifact: assimp_win_$(BUILD_ARCH)

      - job: build_assimp_linux
        displayName: Assimp for Linux
        strategy:
          matrix:
            x86_64:
              ARCH: x64
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: none

          - bash: sudo apt-get update -yqq && sudo apt install -y ninja-build
            displayName: Install Ninja

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimp_version).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - task: CMake@1
            displayName: Configure Assimp
            inputs:
              workingDirectory: assimp-$(assimp_version)
              cmakeArgs: -G Ninja -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel -DASSIMP_BUILD_TESTS=OFF -DASSIMP_NO_EXPORT=ON
                -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DBUILD_SHARED_LIBS=ON

          - bash: cd assimp-$(assimp_version) && ninja
            displayName: Build Assimp

          - publish: $(System.DefaultWorkingDirectory)/assimp-$(assimp_version)/lib
            artifact: assimp_linux_$(ARCH)

      - job: build_assimp_android
        displayName: Assimp for Android
        strategy:
          matrix:
            armv7:
              android_abi: armeabi-v7a
            arm64:
              android_abi: arm64-v8a
            x86:
              android_abi: x86
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: none

          - bash: sudo apt-get update -yqq && sudo apt install -y ninja-build
            displayName: Install Ninja

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimp_version).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - task: CMake@1
            displayName: Configure Assimp
            inputs:
              workingDirectory: assimp-$(assimp_version)
              cmakeArgs: -G Ninja -S . -B . -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI=$(android_abi)
                -DASSIMP_BUILD_TESTS=OFF -DASSIMP_ANDROID_JNIIOSYSTEM=ON -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
                -DCMAKE_TOOLCHAIN_FILE=/usr/local/lib/android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake
                -DASSIMP_NO_EXPORT=ON -DBUILD_SHARED_LIBS=ON

          - bash: cd assimp-$(assimp_version) && ninja
            displayName: Build Assimp

          - publish: $(System.DefaultWorkingDirectory)/assimp-$(assimp_version)/lib/
            artifact: assimp_android_$(android_abi)

      - job: build_assimp_macos_x86_64
        displayName: Assimp for Mac OS X x86_64
        pool:
          vmImage: 'macOS-latest'
        steps:
          - checkout: none

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimp_version).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - task: CMake@1
            displayName: Configure Assimp
            inputs:
              workingDirectory: assimp-$(assimp_version)
              cmakeArgs: -G Xcode -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
                -DASSIMP_BUILD_TESTS=OFF -DASSIMP_NO_EXPORT=ON  -DBUILD_SHARED_LIBS=ON

          - task: Xcode@5
            inputs:
              packageApp: false
              workingDirectory: assimp-$(assimp_version)
              scheme: ALL_BUILD
              configuration: MinSizeRel
              sdk: macosx10.14

          - publish: $(System.DefaultWorkingDirectory)/assimp-$(assimp_version)/lib/MinSizeRel
            artifact: assimp_macos_x86_64

      - job: build_assimp_ios
        displayName: Assimp for iOS
        pool:
          vmImage: 'macOS-latest'
        variables:
          ios_archs: "armv7 arm64 x86_64"
        steps:
          - checkout: none

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimp_version).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - bash: cd assimp-$(assimp_version)/port/iOS &&
              ./build.sh --archs="$(ios_archs)" --stdlib=libc++ --no-fat --std=c++14
            displayName: Build Assimp

          - publish: $(System.DefaultWorkingDirectory)/assimp-$(assimp_version)/lib/iOS
            artifact: assimp_ios

      ## Docs
      - job: build_docs
        displayName: Docs
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UseRubyVersion@0
            inputs:
              versionSpec: '>= 2.4'

          - script: gem install bundler
            displayName: Install bundler
            workingDirectory: $(build.SourcesDirectory)/docs

          - script: bundle install
            displayName: Install deps
            workingDirectory: $(build.SourcesDirectory)/docs

          - script: bundle exec jekyll build -d $(build.binariesDirectory)/_site
            displayName: Build docs with Jekyll
            workingDirectory: $(build.SourcesDirectory)/docs

          - publish: $(build.binariesDirectory)/_site
            artifact: docs

########################################################################################################################
## Packaging
########################################################################################################################

  - stage: packaging
    displayName: Packaging
    jobs:
      - job: packaging
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - download: current

          - bash: ls -la $(Pipeline.Workspace)

          - task: CopyFiles@2
            displayName: Copy docs
            inputs:
              sourceFolder: $(Pipeline.Workspace)/docs
              targetFolder: $(build.SourcesDirectory)/$(package_folder)/Documentation~

          - task: CopyFiles@2
            displayName: Copy AssimpNet
            inputs:
              sourceFolder: $(Pipeline.Workspace)/assimpnet/netstandard2.0
              targetFolder: $(build.SourcesDirectory)/$(package_folder)
              contents: AssimpNet.dll

          # - task: UsePythonVersion@0
          #   inputs:
          #     versionSpec: '3.x'

          # - task: PythonScript@0
          #   inputs:
          #     scriptSource: 'filePath'
          #     scriptPath: package.py
          #     arguments: $(Pipeline.Workspace)

          - task: Npm@1
            displayName: Publishing package
            inputs:
              workingDir: $(package_folder)
              command: publish
              publishRegistry: useFeed
              publishFeed: https://intelligide.pkgs.visualstudio.com/_packaging/intelligide/npm/registry/
