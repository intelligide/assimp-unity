trigger:
  - master
  - develop
  - release/*
  - feature/*

variables:
  assimpVersion: 5.0.1
  assimpNetVersion: 5.0.1
  package_folder: com.arsenstudio.assimp
  publish_feed: stable

  windows_enabled: true
  macosx_enabled: true
  linux_enabled: true
  ios_enabled: true
  android_enabled: true

stages:

########################################################################################################################
## Build
########################################################################################################################

  - stage: build
    displayName: Build
    jobs:
      ## AssimpNet
      - job: build_assimpnet
        displayName: AssimpNet
        pool:
          vmImage: 'windows-latest'
        variables:
          solution: '**/*.sln'
          buildPlatform: 'Any CPU'
          buildConfiguration: 'Release'
        steps:
          - checkout: none

          - bash: curl -L https://github.com/intelligide/assimpnet-unity/archive/$(assimpNetVersion).tar.gz -o assimpnet.zip
            displayName: Download AssimpNet sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - bash: cd assimpnet-unity-$(assimpNetVersion)
            displayName: Chnage directory to AssimpNet source directory

          - task: NuGetToolInstaller@1
            displayName: Nuget installation

          - task: NuGetCommand@2
            displayName: Restore solution
            inputs:
              restoreSolution: '$(solution)'

          - task: VSBuild@1
            displayName: Build AssimpNet
            inputs:
              solution: '$(solution)'
              platform: '$(buildPlatform)'
              configuration: '$(buildConfiguration)'

          - publish: $(System.DefaultWorkingDirectory)/assimpnet/AssimpNet/bin/Release
            artifact: AssimpNet

      ## Windows
      - job: build_assimp_win
        displayName: Assimp for Windows
        condition: eq('${{ variables.windows_enabled }}', 'true')
        strategy:
          matrix:
            x86_64:
              cmakeGeneratorArch: x64
              buildArch: x64
            x86:
              cmakeGeneratorArch: Win32
              buildArch: x86
        pool:
          vmImage: 'windows-2019'
        steps:
          - checkout: none

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimpVersion).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - task: CMake@1
            displayName: Configure Assimp
            inputs:
              workingDirectory: assimp-$(assimpVersion)
              cmakeArgs: -G "Visual Studio 16 2019" -A $(cmakeGeneratorArch) -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel
                -DASSIMP_BUILD_TESTS=OFF -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DBUILD_SHARED_LIBS=ON -DLIBRARY_SUFFIX=""
                -DINJECT_DEBUG_POSTFIX=OFF -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)

          - task: MSBuild@1
            displayName: Build Assimp
            inputs:
              solution: assimp-$(assimpVersion)/Assimp.sln
              msbuildArchitecture: $(buildArch)
              configuration: MinSizeRel

          - task: MSBuild@1
            displayName: Install Assimp
            inputs:
              solution: assimp-$(assimpVersion)/INSTALL.vcxproj
              msbuildArchitecture: $(buildArch)
              configuration: MinSizeRel

          - publish: $(Build.BinariesDirectory)/bin
            artifact: Assimp-Win-$(buildArch)

      ## Linux
      - job: build_assimp_linux
        displayName: Assimp for Linux
        condition: eq('${{ variables.linux_enabled }}', 'true')
        strategy:
          matrix:
            x86_64:
              buildArch: x64
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: none

          - bash: sudo apt-get update -yqq && sudo apt install -y ninja-build
            displayName: Install Ninja

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimpVersion).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - task: CMake@1
            displayName: Configure Assimp
            inputs:
              workingDirectory: assimp-$(assimpVersion)
              cmakeArgs: -G Ninja -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel -DASSIMP_BUILD_TESTS=OFF
                -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)

          - bash: cd assimp-$(assimpVersion) && ninja
            displayName: Build Assimp

          - bash: cd assimp-$(assimpVersion) && ninja install
            displayName: Install Assimp

          - publish: $(Build.BinariesDirectory)/lib
            artifact: Assimp-Linux-$(buildArch)

      ## Android
      - job: build_assimp_android
        displayName: Assimp for Android
        condition: eq('${{ variables.android_enabled }}', 'true')
        strategy:
          matrix:
            armv7:
              androidABI: armeabi-v7a
            arm64:
              androidABI: arm64-v8a
            x86:
              androidABI: x86
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: none

          - bash: sudo apt-get update -yqq && sudo apt install -y ninja-build
            displayName: Install Ninja

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimpVersion).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - task: CMake@1
            displayName: Configure Assimp
            inputs:
              workingDirectory: assimp-$(assimpVersion)
              cmakeArgs: -G Ninja -S . -B . -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI=$(androidABI)
                -DASSIMP_BUILD_TESTS=OFF -DASSIMP_ANDROID_JNIIOSYSTEM=ON -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
                -DCMAKE_TOOLCHAIN_FILE=/usr/local/lib/android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake
                -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)

          - bash: cd assimp-$(assimpVersion) && ninja
            displayName: Build Assimp

          - bash: cd assimp-$(assimpVersion) && ninja install
            displayName: Install Assimp

          - publish: $(Build.BinariesDirectory)/lib
            artifact: Assimp-Android-$(androidABI)

      ## macOS
      - job: build_assimp_macos_x86_64
        displayName: Assimp for Mac OS x86_64
        condition: eq('${{ variables.macosx_enabled }}', 'true')
        pool:
          vmImage: 'macOS-10.15'
        steps:
          - checkout: none

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimpVersion).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - task: CMake@1
            displayName: Configure Assimp
            inputs:
              workingDirectory: assimp-$(assimpVersion)
              cmakeArgs: -G Xcode -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
                -DASSIMP_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)

          - task: Xcode@5
            displayName: Build Assimp
            inputs:
              packageApp: false
              workingDirectory: assimp-$(assimpVersion)
              scheme: ALL_BUILD
              configuration: MinSizeRel
              sdk: macosx10.15

          - task: Xcode@5
            displayName: Install Assimp
            inputs:
              packageApp: false
              workingDirectory: assimp-$(assimpVersion)
              scheme: INSTALL
              configuration: MinSizeRel
              sdk: macosx10.15

          - publish: $(Build.BinariesDirectory)/lib
            artifact: Assimp-macOS-x86_64

      ## iOS
      - job: build_assimp_ios
        displayName: Assimp for iOS
        condition: eq('${{ variables.ios_enabled }}', 'true')
        pool:
          vmImage: 'macOS-latest'
        variables:
          ios_archs: "armv7 arm64 x86_64"
        steps:
          - checkout: none

          - bash: curl -L https://github.com/assimp/assimp/archive/v$(assimpVersion).zip -o assimp.zip
            displayName: Download Assimp sources

          - task: ExtractFiles@1
            displayName: Extract Assimp sources
            inputs:
              archiveFilePatterns: "assimp.zip"
              destinationFolder:
              cleanDestinationFolder: false

          - bash: cd assimp-$(assimpVersion)/port/iOS &&
              ./build.sh --archs="$(ios_archs)" --stdlib=libc++ --no-fat --std=c++14
            displayName: Build Assimp

          - publish: $(System.DefaultWorkingDirectory)/assimp-$(assimpVersion)/lib/iOS
            artifact: Assimp-iOS

      ## Docs
      - job: build_docs
        displayName: Docs
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UseRubyVersion@0
            inputs:
              versionSpec: '>= 2.4'

          - script: gem install bundler
            displayName: Install bundler
            workingDirectory: $(build.SourcesDirectory)/docs

          - script: bundle install
            displayName: Install deps
            workingDirectory: $(build.SourcesDirectory)/docs

          - script: bundle exec jekyll build -d $(build.binariesDirectory)/_site
            displayName: Build docs with Jekyll
            workingDirectory: $(build.SourcesDirectory)/docs

          - publish: $(build.binariesDirectory)/_site
            artifact: Docs

########################################################################################################################
## Packaging
########################################################################################################################

  - stage: packaging
    displayName: Packaging
    jobs:
      - job: packaging
        displayName: Packaging
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - download: current

          - task: CopyFiles@2
            displayName: Copy docs
            inputs:
              sourceFolder: $(Pipeline.Workspace)/docs
              targetFolder: $(build.SourcesDirectory)/$(package_folder)/Documentation~

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_net/netstandard2.0/AssimpNet.dll $(build.SourcesDirectory)/$(package_folder)/AssimpNet.dll
            displayName: Install AssimpNet

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_win_x64/assimp.dll $(build.SourcesDirectory)/$(package_folder)/Plugins/win/x86_64/assimp.dll
            displayName: Install Assimp for Windows x64
            condition: eq('${{ variables.windows_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_win_x86/assimp.dll $(build.SourcesDirectory)/$(package_folder)/Plugins/win/x86/assimp.dll
            displayName: Install Assimp for Windows x86
            condition: eq('${{ variables.windows_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_linux_x64/libassimp.so $(build.SourcesDirectory)/$(package_folder)/Plugins/linux/x86_64/libassimp.so
            displayName: Install Assimp for Linux x86_64
            condition: eq('${{ variables.linux_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_macos_x86_64/libassimp.dylib $(build.SourcesDirectory)/$(package_folder)/Plugins/osx/x86_64/libassimp.dylib
            displayName: Install Assimp for Mac OS X x86_64
            condition: eq('${{ variables.macosx_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_android_armeabi-v7a/libassimp.so $(build.SourcesDirectory)/$(package_folder)/Plugins/android/armv7/libassimp.so
            displayName: Install Assimp for Android armv7
            condition: eq('${{ variables.android_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_android_arm64-v8a/libassimp.so $(build.SourcesDirectory)/$(package_folder)/Plugins/android/arm64/libassimp.so
            displayName: Install Assimp for Android arm64
            condition: eq('${{ variables.android_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_android_x86/libassimp.so $(build.SourcesDirectory)/$(package_folder)/Plugins/android/x86/libassimp.so
            displayName: Install Assimp for Android x86
            condition: eq('${{ variables.android_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_ios/armv7/libassimp.a $(build.SourcesDirectory)/$(package_folder)/Plugins/ios/armv7/libassimp.a
            displayName: Install Assimp for iOS armv7
            condition: eq('${{ variables.ios_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_ios/arm64/libassimp.a $(build.SourcesDirectory)/$(package_folder)/Plugins/ios/arm64/libassimp.a
            displayName: Install Assimp for iOS arm64
            condition: eq('${{ variables.ios_enabled }}', 'true')

          - script: yes | cp -f $(Pipeline.Workspace)/assimp_ios/x86_64/libassimp.a $(build.SourcesDirectory)/$(package_folder)/Plugins/ios/x64/libassimp.a
            displayName: Install Assimp for iOS x86_64
            condition: eq('${{ variables.ios_enabled }}', 'true')

          - script: yes | cp -f $(build.SourcesDirectory)/README.md $(build.SourcesDirectory)/$(package_folder)/README.md
            displayName: Copy README

          - script: yes | cp -f $(build.SourcesDirectory)/LICENSE.md $(build.SourcesDirectory)/$(package_folder)/LICENSE.md
            displayName: Copy License

          - task: DeleteFiles@1
            inputs:
              sourceFolder: $(build.SourcesDirectory)/$(package_folder)
              contents: "**/.gitkeep"

          - publish: $(build.SourcesDirectory)/$(package_folder)
            artifact: final_package

########################################################################################################################
## Publishing
########################################################################################################################

  # - stage: publishing
  #   displayName: Publishing
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #   jobs:
  #     - job: publishing
  #       displayName: Publishing
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #         - download: current
  #           artifact: final_package

  #         - task: Npm@1
  #           displayName: Publishing package
  #           inputs:
  #             workingDir: $(build.SourcesDirectory)/$(package_folder)
  #             command: publish
  #             publishRegistry: useFeed
  #             publishFeed: $(System.TeamProjectId)/$(publish_feed)
