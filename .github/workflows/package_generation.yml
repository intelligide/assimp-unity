name: Build

on:
  workflow_call:
    inputs:
      assimpVersion:
        required: true
        type: string
      assimpNetVersion:
        required: true
        type: string
      packageName:
        default: 'UnityPackage'
        type: string
      buildWindows:
        default: true
        type: boolean
      buildmacOS:
        default: true
        type: boolean
      buildLinux:
        default: true
        type: boolean
      buildiOS:
        default: true
        type: boolean
      buildAndroid:
        default: true
        type: boolean
    outputs:
      packageName:
        value: ${{ inputs.packageName }}

jobs:
  build_assimpnet:
    name: Build AssimpNet
    runs-on: windows-latest
    env:
      BuildPlatform: 'Any CPU'
      BuildConfiguration: 'Release'
    steps:
      - uses: actions/checkout@v3

      - name: Download AssimpNet sources
        uses: actions/checkout@v3
        with:
          repository: 'intelligide/assimpnet-unity'
          path: 'assimpnet'
          ref: '${{ inputs.AssimpNetVersion }}'

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1

      - name: Restore solution
        run: nuget restore assimpnet/AssimpNet/AssimpNet.csproj

      - name: Build AssimpNet
        run: msbuild assimpnet/AssimpNet/AssimpNet.csproj -p:Configuration="${{ env.BuildConfiguration }}"
          -p:Platform="${{ env.BuildPlatform }}" -p:TargetFrameworks="netstandard2.0" -p:OutputPath="Builds/Shared"

      - name: Build AssimpNet for static linking
        run: msbuild assimpnet/AssimpNet/AssimpNet.csproj -p:Configuration="${{ env.BuildConfiguration }}"
          -p:Platform="${{ env.BuildPlatform }}" -p:TargetFrameworks="netstandard2.0" -p:OutputPath="Builds/Static"
          -p:StaticNativeLinking=true -p:AssemblyName="AssimpNet.Static"

      - uses: actions/upload-artifact@v3
        with:
          name: AssimpNet
          path: |
            assimpnet/AssimpNet/Builds/Shared
            assimpnet/AssimpNet/Builds/Static

      - uses: actions/upload-artifact@v3
        with:
          name: AssimpNet
          path: assimpnet/License.txt

  build_assimp_win:
    name: Build Assimp for Windows
    if: inputs.buildWindows
    runs-on: windows-2022
    env:
      GeneratorName: Visual Studio 17 2022
    strategy:
      fail-fast: false
      matrix:
        include:
          - GeneratorArch: x64
            BuildArch: x64
          - GeneratorArch: Win32
            BuildArch: x86
    steps:
      - name: Download Assimp sources
        shell: pwsh
        run: Invoke-WebRequest -Uri "https://github.com/assimp/assimp/archive/v${{ inputs.AssimpVersion }}.zip" -OutFile assimp.zip

      - name: Extract Assimp sources
        run: 7z x assimp.zip

      - name: Configure Assimp
        run: cmake -G "${{ env.GeneratorName }}" -A ${{ matrix.GeneratorArch }} -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel
            -DASSIMP_BUILD_TESTS=OFF -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DBUILD_SHARED_LIBS=ON
            -DLIBRARY_SUFFIX="" -DINJECT_DEBUG_POSTFIX=OFF -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - name: Build Assimp
        run: cmake --build . --config MinSizeRel
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - name: Install Assimp
        run: cmake --build . --target install --config MinSizeRel
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-Win-${{ matrix.BuildArch }}
          path: ${{ runner.temp }}/bin/assimp.dll

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-Win-${{ matrix.BuildArch }}
          path: assimp-${{ inputs.AssimpVersion }}/LICENSE

  build_assimp_linux:
    name: Build Assimp for Linux
    if: inputs.buildLinux
    runs-on: ubuntu-latest
    env:
      CFLAGS: -g0 -s -Wl,-s
      CXXFLAGS: -g0 -s -Wl,-s
      LDFLAGS: -g0 -s -Wl,-s
    strategy:
      fail-fast: false
      matrix:
        BuildArch: [x64]
    steps:
      - name: Install Ninja
        run: sudo apt-get update -yqq && sudo apt install -y ninja-build

      - name: Download Assimp sources
        run: curl -L https://github.com/assimp/assimp/archive/v${{ inputs.AssimpVersion }}.zip -o assimp.zip

      - name: Extract Assimp sources
        run: unzip assimp.zip

      - name: Configure Assimp
        run: cmake -G Ninja -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel -DASSIMP_BUILD_TESTS=OFF
            -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - name: Build Assimp
        run: cmake --build . --config MinSizeRel
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - name: Install Assimp
        run: cmake --build . --target install --config MinSizeRel
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-Linux-${{ matrix.BuildArch }}
          path: ${{ runner.temp }}/lib/libassimp.so

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-Linux-${{ matrix.BuildArch }}
          path:  assimp-${{ inputs.AssimpVersion }}/LICENSE

  build_assimp_android:
    name: Build Assimp for Android
    if: inputs.buildAndroid
    runs-on: ubuntu-latest
    env:
      CFLAGS: -g0 -s -Wl,-s
      CXXFLAGS: -g0 -s -Wl,-s
      LDFLAGS: -g0 -s -Wl,-s
    strategy:
      fail-fast: false
      matrix:
        AndroidABI: [armeabi-v7a, arm64-v8a, x86, x86_64]
    steps:
      - name: Install Ninja
        run: sudo apt-get update -yqq && sudo apt install -y ninja-build

      - name: Download Assimp sources
        run: curl -L https://github.com/assimp/assimp/archive/v${{ inputs.AssimpVersion }}.zip -o assimp.zip

      - name: Extract Assimp sources
        run: unzip assimp.zip

      - name: Configure Assimp
        run: cmake -G Ninja -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel -DANDROID_ABI=${{ matrix.AndroidABI }}
            -DASSIMP_BUILD_TESTS=OFF -DASSIMP_ANDROID_JNIIOSYSTEM=ON -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake
            -DBUILD_SHARED_LIBS=ON -DANDROID_STL=c++_static -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - name: Build Assimp
        run: cmake --build . --config MinSizeRel
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - name: Install Assimp
        run: cmake --build . --target install/strip --config MinSizeRel
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-Android-${{ matrix.AndroidABI }}
          path: ${{ runner.temp }}/lib/libassimp.so

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-Android-${{ matrix.AndroidABI }}
          path: assimp-${{ inputs.AssimpVersion }}/LICENSE

  build_assimp_macos:
    name: Build Assimp for Mac OS X
    if: inputs.buildmacOS
    runs-on: 'macos-latest'
    strategy:
      fail-fast: false
      matrix:
        BuildArch: [x86_64]
    env:
      CFLAGS: -g0
      CXXFLAGS: -g0
      LDFLAGS: -g0 -s
    steps:
      - name: Download Assimp sources
        run: curl -L https://github.com/assimp/assimp/archive/v${{ inputs.AssimpVersion }}.zip -o assimp.zip

      - name: Extract Assimp sources
        run: unzip assimp.zip

      - name: Configure Assimp
        run: cmake -G "Unix Makefiles" -S . -B . -DCMAKE_BUILD_TYPE=MinSizeRel -DASSIMP_BUILD_TESTS=OFF
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DASSIMP_BUILD_ASSIMP_TOOLS=OFF -DBUILD_SHARED_LIBS=ON
            -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - name: Build Assimp
        run: cmake --build . --config MinSizeRel
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - name: Install Assimp
        run: cmake --build . --target install/strip --config MinSizeRel
        working-directory : assimp-${{ inputs.AssimpVersion }}

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-macOS-${{ matrix.BuildArch }}
          path: ${{ runner.temp }}/lib/libassimp.dylib

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-macOS-${{ matrix.BuildArch }}
          path: assimp-${{ inputs.AssimpVersion }}/LICENSE

  build_assimp_ios:
    name: Build Assimp for iOS
    if: inputs.buildiOS
    runs-on: 'macos-latest'
    env:
      CFLAGS: -g0
      CXXFLAGS: -g0
      LDFLAGS: -g0 -s
    strategy:
      fail-fast: false
      matrix:
        BuildArch: [arm64, x86_64]
    steps:
      - uses: actions/checkout@v3
        with:
          path: assimp-unity

      - name: Download Assimp sources
        run: curl -L https://github.com/assimp/assimp/archive/v${{ inputs.AssimpVersion }}.zip -o assimp.zip

      - name: Extract Assimp sources
        run: unzip assimp.zip

      - name: Apply patches
        run: patch -Np1 < ${{ github.workspace }}/assimp-unity/patches/4.1.0/iOS/0001-enable-bitcode.patch
        working-directory: assimp-${{ inputs.AssimpVersion }}

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build Assimp
        run: ./build.sh --archs="${{ matrix.BuildArch }}" --stdlib=libc++ --no-fat --std=c++14
        working-directory: assimp-${{ inputs.AssimpVersion }}/port/iOS

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-iOS-${{ matrix.BuildArch }}
          path: |
            assimp-${{ inputs.AssimpVersion }}/lib/iOS/${{ matrix.BuildArch }}/libassimp.a
            assimp-${{ inputs.AssimpVersion }}/lib/libIrrXML.a
            assimp-${{ inputs.AssimpVersion }}/lib/libzlibstatic.a

      - uses: actions/upload-artifact@v3
        with:
          name: Assimp-iOS-${{ matrix.BuildArch }}
          path: assimp-${{ inputs.AssimpVersion }}/LICENSE

  package_assimpnet:
    name: Package AssimpNet
    runs-on: ubuntu-latest
    env:
      ArtifactTemporaryDir: artifacts
      PackageName: "com.frozenstorminteractive.assimp"
    needs:
      - build_assimpnet
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: AssimpNet
          path: ${{ env.ArtifactTemporaryDir }}/AssimpNet

      - name: Install AssimpNet
        run: cp -f ${{ env.ArtifactTemporaryDir }}/AssimpNet/Shared/AssimpNet.dll packages/${{ env.PackageName }}/AssimpNet.dll

      - name: Install AssimpNet Static
        run: cp -f ${{ env.ArtifactTemporaryDir }}/AssimpNet/Static/AssimpNet.Static.dll packages/${{ env.PackageName }}/AssimpNet.Static.dll

      - name: Copy README
        run: cp -f README.md packages/${{ env.PackageName }}/README.md

      - name: Copy AssimpNet License
        run: cp -f ${{ env.ArtifactTemporaryDir }}/AssimpNet/License.txt packages/${{ env.PackageName }}/AssimpNetLicense.txt

      - name: Delete gitkeep files
        run: find packages/${{ env.PackageName }} -name '.gitkeep' -delete

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PackageName }}
          path: packages/${{ env.PackageName }}

  package_win:
    name: Package for Windows
    runs-on: ubuntu-latest
    env:
      ArtifactTemporaryDir: artifacts
      PackageName: "com.frozenstorminteractive.assimp.windows"
    needs:
      - build_assimp_win
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-Win-x64
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-Win-x64

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-Win-x86
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-Win-x86

      - name: Install Assimp for Windows x64
        if: inputs.buildWindows
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Win-x64/assimp.dll packages/${{ env.PackageName }}/Plugins/win/x86_64/assimp.dll

      - name: Install Assimp for Windows x86
        if: inputs.buildWindows
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Win-x86/assimp.dll packages/${{ env.PackageName }}/Plugins/win/x86/assimp.dll

      - name: Copy Assimp License
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Win-x64/LICENSE packages/${{ env.PackageName }}/AssimpLicense.txt

      - name: Delete gitkeep files
        run: find packages/${{ env.PackageName }} -name '.gitkeep' -delete

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PackageName }}
          path: packages/${{ env.PackageName }}

  package_linux:
    name: Package for Linux
    runs-on: ubuntu-latest
    env:
      ArtifactTemporaryDir: artifacts
      PackageName: "com.frozenstorminteractive.assimp.linux"
    needs:
      - build_assimp_linux
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-Linux-x64
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-Linux-x64

      - name: Install Assimp for Linux x86_64
        if: inputs.buildLinux
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Linux-x64/libassimp.so packages/${{ env.PackageName }}/Plugins/linux/x86_64/libassimp.so

      - name: Copy Assimp License
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Linux-x64/LICENSE packages/${{ env.PackageName }}/AssimpLicense.txt

      - name: Delete gitkeep files
        run: find packages/${{ env.PackageName }} -name '.gitkeep' -delete

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PackageName }}
          path: packages/${{ env.PackageName }}

  package_android:
    name: Package for Android
    runs-on: ubuntu-latest
    env:
      ArtifactTemporaryDir: artifacts
      PackageName: "com.frozenstorminteractive.assimp.android"
    needs:
      - build_assimp_android
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-Android-arm64-v8a
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-Android-arm64-v8a

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-Android-armeabi-v7a
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-Android-armeabi-v7a

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-Android-x86
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-Android-x86

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-Android-x86_64
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-Android-x86_64

      - name: Install Assimp for Android armv7
        if: inputs.buildAndroid
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Android-armeabi-v7a/libassimp.so packages/${{ env.PackageName }}/Plugins/android/armv7/libassimp.so

      - name: Install Assimp for Android arm64
        if: inputs.buildAndroid
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Android-arm64-v8a/libassimp.so packages/${{ env.PackageName }}/Plugins/android/arm64/libassimp.so

      - name: Install Assimp for Android x86
        if: inputs.buildAndroid
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Android-x86/libassimp.so packages/${{ env.PackageName }}/Plugins/android/x86/libassimp.so

      - name: Install Assimp for Android x86_64
        if: inputs.buildAndroid
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Android-x86_64/libassimp.so packages/${{ env.PackageName }}/Plugins/android/x86_64/libassimp.so

      - name: Copy Assimp License
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-Android-x86/LICENSE packages/${{ env.PackageName }}/AssimpLicense.txt

      - name: Delete gitkeep files
        run: find packages/${{ env.PackageName }} -name '.gitkeep' -delete

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PackageName }}
          path: packages/${{ env.PackageName }}

  package_macos:
    name: Package for macOS
    runs-on: ubuntu-latest
    env:
      ArtifactTemporaryDir: artifacts
      PackageName: "com.frozenstorminteractive.assimp.macos"
    needs:
      - build_assimp_macos
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-macOS-x86_64
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-macOS-x86_64

      - name: Install Assimp for Mac OS X x86_64
        if: inputs.buildmacOS
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-macOS-x86_64/libassimp.dylib packages/${{ env.PackageName }}/Plugins/osx/x86_64/libassimp.dylib

      - name: Copy Assimp License
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-macOS-x86_64/LICENSE packages/${{ env.PackageName }}/AssimpLicense.txt

      - name: Delete gitkeep files
        run: find packages/${{ env.PackageName }} -name '.gitkeep' -delete

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PackageName }}
          path: packages/${{ env.PackageName }}

  package_ios:
    name: Package for iOS
    runs-on: ubuntu-latest
    env:
      ArtifactTemporaryDir: artifacts
      PackageName: "com.frozenstorminteractive.assimp.ios"
    needs:
      - build_assimp_ios
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-iOS-arm64
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-arm64

      - uses: actions/download-artifact@v3
        with:
          name: Assimp-iOS-x86_64
          path: ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-x86_64

      - name: Install Assimp for iOS arm64
        if: inputs.buildiOS
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-arm64/iOS/arm64/libassimp.a packages/${{ env.PackageName }}/Plugins/ios/arm64/libassimp.a

      - name: Install Assimp for iOS arm64
        if: inputs.buildiOS
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-arm64/libIrrXML.a packages/${{ env.PackageName }}/Plugins/ios/arm64/libIrrXML.a

      - name: Install Assimp for iOS arm64
        if: inputs.buildiOS
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-arm64/libzlibstatic.a packages/${{ env.PackageName }}/Plugins/ios/arm64/libzlibstatic.a

      - name: Install Assimp for iOS x86_64
        if: inputs.buildiOS
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-x86_64/iOS/x86_64/libassimp.a packages/${{ env.PackageName }}/Plugins/ios/x64/libassimp.a

      - name: Install Assimp for iOS x86_64
        if: inputs.buildiOS
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-x86_64/libIrrXML.a packages/${{ env.PackageName }}/Plugins/ios/x64/libIrrXML.a

      - name: Install Assimp for iOS x86_64
        if: inputs.buildiOS
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-x86_64/libzlibstatic.a packages/${{ env.PackageName }}/Plugins/ios/x64/libzlibstatic.a

      - name: Copy Assimp License
        run: cp -f ${{ env.ArtifactTemporaryDir }}/Assimp-iOS-x86_64/LICENSE packages/${{ env.PackageName }}/AssimpLicense.txt

      - name: Delete gitkeep files
        run: find packages/${{ env.PackageName }} -name '.gitkeep' -delete

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PackageName }}
          path: packages/${{ env.PackageName }}
